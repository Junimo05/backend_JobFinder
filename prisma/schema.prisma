// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userID   Int       @id @default(autoincrement())
  username String    @unique
  password String
  Employee Employee?
  Employer Employer?
}

model Employee {
  employeeID    Int           @id @default(autoincrement())
  userID        Int           @unique
  name          String
  age           Int           @unique
  Phone         String?       @unique
  Email         String        @unique
  AboutMe       String?
  Hobbies       String?
  Employee_User User          @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: NoAction)
  Application   Application[]

  @@index([userID])
}

model Employer {
  employerID    Int    @id @default(autoincrement())
  userID        Int    @unique
  CompanyName   String
  Industry      String //chuyen nganh
  Email         String @unique
  Phone         String @unique
  Employer_User User   @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: NoAction)
  Job           Job[]

  @@index([userID])
}

model Job {
  jobID        Int           @id @default(autoincrement())
  employerID   Int           @unique
  JobTitle     String
  Location     String
  Description  String
  Requirements String
  Persons      Int
  SalaryRange  String
  PostDate     DateTime      @default(now())
  CloseDate    DateTime
  Deleted      Boolean       @default(false)
  Application  Application[]
  Job_Employer Employer      @relation(fields: [employerID], references: [employerID], onDelete: Cascade, onUpdate: NoAction)
  JobGroup     JobOnGroup[]

  @@index([employerID])
}

model JobGroup {
  groupID       Int          @id @default(autoincrement())
  jobGroupTitle String       @unique
  Description   String
  JobOnGroup    JobOnGroup[]
}

model JobOnGroup {
  jobID    Int       @id
  groupID  Int
  Job      Job?      @relation(fields: [jobID], references: [jobID], onDelete: Cascade, onUpdate: NoAction)
  JobGroup JobGroup? @relation(fields: [groupID], references: [groupID], onDelete: Cascade, onUpdate: NoAction)

  @@index([jobID], map: "jobID")
  @@index([groupID], map: "groupID")
}

model Application {
  appID          Int      @id @default(autoincrement())
  employeeID     Int
  jobID          Int
  Description    String
  applyDate      DateTime @default(now())
  Status         String   @default("Waiting")
  Appli_Employee Employee @relation(fields: [employeeID], references: [employeeID], onDelete: Cascade, onUpdate: NoAction)
  Appli_Job      Job      @relation(fields: [jobID], references: [jobID], onDelete: Cascade, onUpdate: NoAction)

  @@index([employeeID], map: "employeeID")
  @@index([jobID], map: "jobID")
}
