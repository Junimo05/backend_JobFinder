generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model application {
  appID       Int      @id @default(autoincrement())
  employeeID  Int
  jobID       Int
  Description String
  applyDate   DateTime @default(now())
  Status      String   @default("Waiting") //Refused - Accepted - Waiting
  employee    employee @relation(fields: [employeeID], references: [employeeID], onDelete: Cascade, onUpdate: NoAction, map: "Application_employeeID_fkey")
  job         job      @relation(fields: [jobID], references: [jobID], onDelete: Cascade, onUpdate: NoAction, map: "Application_jobID_fkey")

  @@index([employeeID], map: "Application_employeeID_key")
  @@index([employeeID], map: "employeeID")
  @@index([jobID], map: "jobID")
}

model employee {
  employeeID  Int           @id @default(autoincrement())
  userID      Int           @unique(map: "Employee_userID_key")
  name        String
  age         Int           @unique(map: "Employee_age_key")
  Phone       String?       @unique(map: "Employee_Phone_key")
  Email       String        @unique(map: "Employee_Email_key")
  AboutMe     String?
  Hobbies     String?
  application application[]
  user        user          @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: NoAction, map: "Employee_userID_fkey")

  @@index([userID], map: "Employee_userID_idx")
}

model employer {
  employerID  Int    @id @default(autoincrement())
  userID      Int    @unique(map: "Employer_userID_key")
  CompanyName String
  Industry    String
  Email       String @unique(map: "Employer_Email_key")
  Phone       String @unique(map: "Employer_Phone_key")
  user        user   @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: NoAction, map: "Employer_userID_fkey")
  job         job[]

  @@index([userID], map: "Employer_userID_idx")
}

model job {
  jobID        Int           @id @default(autoincrement())
  employerID   Int
  JobTitle     String
  Location     String
  Description  String
  Requirements String
  Persons      Int
  SalaryRange  String
  PostDate     DateTime      @default(now())
  CloseDate    DateTime
  Deleted      Boolean       @default(false)
  application  application[]
  employer     employer      @relation(fields: [employerID], references: [employerID], onDelete: Cascade, onUpdate: NoAction, map: "Job_employerID_fkey")
  jobongroup   jobongroup?

  @@index([employerID], map: "Job_employerID_idx")
}

model jobgroup {
  groupID       Int          @id @default(autoincrement())
  jobGroupTitle String       @unique(map: "JobGroup_jobGroupTitle_key")
  Description   String
  jobongroup    jobongroup[]
}

model jobongroup {
  jobID    Int      @id
  groupID  Int
  jobgroup jobgroup @relation(fields: [groupID], references: [groupID], onDelete: Cascade, onUpdate: NoAction, map: "JobOnGroup_groupID_fkey")
  job      job      @relation(fields: [jobID], references: [jobID], onDelete: Cascade, onUpdate: NoAction, map: "JobOnGroup_jobID_fkey")

  @@index([groupID], map: "groupID")
  @@index([jobID], map: "jobID")
}

model user {
  userID   Int       @id @default(autoincrement())
  username String    @unique(map: "User_username_key")
  password String
  imgurl   String?   @db.VarChar(100)
  employee employee?
  employer employer?
}
